(self.webpackChunk_varlet_ui=self.webpackChunk_varlet_ui||[]).push([[9673],{9673:(s,e,a)=>{"use strict";a.r(e),a.d(e,{default:()=>o});var l=a(7875),n={class:"varlet-site-doc"},c=(0,l.uE)('<h1>Locale</h1><div class="card"><h3>Intro</h3><p>Component library uses Chinese as the default language, support multi-language switch, built-in support for <code>Chinese</code>, <code>English</code>.</p></div><div class="card"><h3>Multi-language switch</h3><p>The <code>Locale</code> component is introduced to realize multi-language switching, and <code>Locale.add</code> is used for language extension.</p><pre class="hljs"><code><link rel="stylesheet" href="./highlight.css"><span class="hljs-keyword">import</span> { Locale } <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@varlet/ui&#39;</span>\n<span class="hljs-keyword">import</span> enUS <span class="hljs-keyword">from</span> <span class="hljs-string">&#39;@varlet/ui/es/locale/en-US&#39;</span>\n\nLocale.add(<span class="hljs-string">&#39;en-US&#39;</span>, enUS)\n</code></pre><p>Use <code>Locale.use</code> to switch languages.</p><pre class="hljs"><code><link rel="stylesheet" href="./highlight.css">Locale.use(<span class="hljs-string">&#39;en-US&#39;</span>)\n</code></pre><p>Use <code>Locale.merge</code> to merge languages.</p><pre class="hljs"><code><link rel="stylesheet" href="./highlight.css">Locale.merge(<span class="hljs-string">&#39;en-US&#39;</span>, {\n  <span class="hljs-attr">dialogTitle</span>: <span class="hljs-string">&#39;Hello&#39;</span>\n})\n</code></pre></div>',3);const o={render:function(s,e){return(0,l.wg)(),(0,l.j4)("div",n,[c])}}}}]);